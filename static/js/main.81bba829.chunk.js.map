{"version":3,"sources":["pages/gifWallet.gif","pages/Login.js","actions/index.js","components/ButtonAdd.js","components/ContentItem.js","components/TableExpenses.js","components/FormWallet.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","Login","state","email","password","onSubmitLogin","bind","handleChange","this","props","history","getEmail","push","target","name","value","setState","passwordCorrect","length","className","src","require","alt","placeholder","type","data-testid","onChange","disabled","test","onClick","React","Component","connect","dispatch","payload","saveEmail","ButtonAdd","ContentItem","getCurrencyName","exchangeRates","currency","split","ask","rate","total","Number","Math","round","EPSILON","expense","description","method","tag","currencyName","getRate","convertedValue","getConvertedValue","roundedRate","expenses","wallet","TableExpenses","map","key","id","FormWallet","onSavedAdd","fetchAPI","addChange","currencies","arrayCurrencies","Object","keys","htmlFor","index","fetch","then","response","json","data","USDT","stateTotal","valueTotal","valueData","Wallet","sumTotal","sum","convertValue","forEach","item","toFixed","emailValue","user","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","userReducer","action","walletReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.81bba829.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gifWallet.cad8efa7.gif\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { saveEmail } from '../actions';\nimport '../css/main.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n    };\n\n    this.onSubmitLogin = this.onSubmitLogin.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  onSubmitLogin() {\n    const { history, getEmail } = this.props;\n    const { email } = this.state;\n    getEmail(email);\n    history.push('/carteira');\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { email, password } = this.state;\n    const passwordLength = 6;\n    const passwordCorrect = password.length >= passwordLength;\n    const verifiedEmail = () => {\n      const result = /\\S+@\\S+\\.\\S+/;\n      return result.test(email);\n    };\n\n    return (\n      <main className=\"login-form\">\n        <span className=\"title\">WALLET</span>\n        <img src={ require('./gifWallet.gif') } alt=\"wallet\" className=\"wallet-gif\" />\n        <input\n          className=\"input-form\"\n          placeholder=\"E-mail\"\n          type=\"text\"\n          name=\"email\"\n          data-testid=\"email-input\"\n          onChange={ this.handleChange }\n        />\n        <input\n          className=\"input-form\"\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          data-testid=\"password-input\"\n          onChange={ this.handleChange }\n        />\n        <button\n          className=\"button-login\"\n          type=\"submit\"\n          disabled={ !(verifiedEmail() && passwordCorrect) }\n          onClick={ this.onSubmitLogin }\n        >\n          Entrar\n        </button>\n      </main>\n    );\n  }\n}\n\nLogin.propTypes = {\n  getEmail: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getEmail: (email) => dispatch(saveEmail(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","export const SAVE_EMAIL = 'SAVE_EMAIL';\nexport const CAMBIO_CHANGE = 'CAMBIO_CHANGE';\nexport const SAVED_VALUES = 'SAVED_VALUES';\nexport const CONVERT_VALUE = 'CONVERT_VALUE';\n// export const ADD_EXPENSE = 'ADD_EXPENSE';\n\nexport const saveEmail = (email) => ({ type: SAVE_EMAIL, payload: email });\n\nexport const cambioChanges = (wallet) => ({ type: CAMBIO_CHANGE, payload: wallet });\n\nexport const valueConvert = (payload) => ({ type: CONVERT_VALUE, payload });\n\n// export const addExpense = (payload) => ({ type: ADD_EXPENSE, payload });\n\nexport const valueCambio = () => (dispatch) => fetch('https://economia.awesomeapi.com.br/json/all')\n  .then((response) => response.json()\n    .then((data) => {\n      delete data.USDT;\n      dispatch(cambioChanges(data));\n    }));\n\nexport const convertValue = (valueTotal) => (dispatch) => fetch('https://economia.awesomeapi.com.br/json/all')\n  .then((response) => response.json()\n    .then((data) => {\n      const valueData = {\n        ...valueTotal,\n        exchangeRates: data };\n      return dispatch(valueConvert(valueData));\n    }));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ButtonAdd extends React.Component {\n  render() {\n    const { onClick } = this.props;\n    return (\n      <input\n        className=\"button-expenses\"\n        type=\"button\"\n        value=\"Adicionar despesa\"\n        onClick={ () => onClick() }\n      />\n    );\n  }\n}\n\nButtonAdd.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ButtonAdd;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { BiTrash, BiEditAlt } from 'react-icons/bi';\n// import { addExpense, convertValue, refreshItems } from '../actions';\n\nclass ContentItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getCurrencyName = this.getCurrencyName.bind(this);\n  }\n\n  getCurrencyName(exchangeRates, currency) {\n    const { name } = exchangeRates[currency];\n    return name.split('/')[0];\n  }\n\n  getRate(exchangeRates, currency) {\n    const { ask } = exchangeRates[currency];\n    return ask;\n  }\n\n  getConvertedValue(rate, value) {\n    const total = Number(rate) * Number(value);\n    const valueTotal = Math.round((total + Number.EPSILON) * 100) / 100;\n    return valueTotal;\n  }\n\n  // deleteItem(expense) {\n  //   const { expenses } = this.props;\n  //   const index = expenses.indexOf(expense);\n  //   const newExpenses = [...expenses];\n  //   newExpenses.splice(index, 1);\n  //   // newExpenses = newExpenses.map((expense, i) => ({ ...expense, id: i }));\n  // }\n\n\n  render() {\n    const { expense } = this.props;\n    const { value, description, currency, method, tag, exchangeRates } = expense;\n    const currencyName = this.getCurrencyName(exchangeRates, currency);\n    const rate = this.getRate(exchangeRates, currency);\n    const convertedValue = this.getConvertedValue(rate, value);\n    const roundedRate = Math.round((rate) * 100) / 100;\n\n    return (\n      <tr className=\"table-add\">\n        <td>{description}</td>\n        <td>{tag}</td>\n        <td>{method}</td>\n        <td>{`${value}`}</td>\n        <td>{currencyName}</td>\n        <td>{`${roundedRate}`}</td>\n        <td>{`${convertedValue}`}</td>\n        <td>Real</td>\n        <td>\n          <button\n            type=\"button\"\n            data-testid=\"delete-btn\"\n            className=\"button-delete\"\n          >\n            <BiTrash />\n          </button>\n          <button \n            type=\"button\"\n            data-testid=\"edit-btn\"\n            className=\"button-edit\"\n          >\n            <BiEditAlt />\n          </button>\n        </td>\n      </tr>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(ContentItem);","import React from 'react';\nimport { connect } from 'react-redux';\nimport ContentItem from './ContentItem';\nimport PropTypes from 'prop-types';\n\nclass TableExpenses extends React.Component {\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table className=\"table-new\">\n        <tr className=\"table-cel\">\n          <th>Descrição</th>\n          <th>Tag</th>\n          <th>Método de pagamento</th>\n          <th>Valor</th>\n          <th>Moeda</th>\n          <th>Câmbio utilizado</th>\n          <th>Valor convertido</th>\n          <th>Moeda de conversão</th>\n          <th>Excluir/Editar</th>\n        </tr>\n        {expenses\n          .map((expense) => (\n            <ContentItem\n              key={expense.id}\n              expense={expense}\n            />\n          ))}\n      </table>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nTableExpenses.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps)(TableExpenses);","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { convertValue, valueCambio } from '../actions';\nimport ButtonAdd from './ButtonAdd';\nimport TableExpenses from './TableExpenses';\n\nclass FormWallet extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.onSavedAdd = this.onSavedAdd.bind(this);\n  }\n\n  componentDidMount() {\n    const { fetchAPI } = this.props;\n    fetchAPI();\n  }\n\n  // Adicionando as despesas no store com o click do botão\n  onSavedAdd() {\n    const { expenses, addChange } = this.props;\n    const newExpense = ({ ...this.state, id: expenses.length });\n    addChange(newExpense);\n  }\n\n  handleChange({ target }) {\n    const { id, value } = target;\n    this.setState({ [id]: value });\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const arrayCurrencies = Object.keys(currencies);\n\n    return (\n      <div>\n      <form className=\"form-wallet\">\n        <label htmlFor=\"value\" className=\"label-form\">\n          Valor\n          <input\n            className=\"input-wallet-form\"\n            type=\"text\" \n            id=\"value\" \n            onChange={ this.handleChange } \n          />\n        </label>\n        <label htmlFor=\"description\" className=\"label-form\">\n          Descrição\n          <input\n            className=\"input-wallet-form\"\n            type=\"text\" \n            id=\"description\" \n            onChange={ this.handleChange } \n            />\n        </label>\n        <label htmlFor=\"currency\" className=\"label-form\">\n          Moeda\n          <select id=\"currency\" onChange={ this.handleChange }>\n            {arrayCurrencies.map((state, index) => (\n              <option\n                key={ arrayCurrencies[index] }\n                value={ arrayCurrencies[index] }\n              >\n                { arrayCurrencies[index] }\n              </option>\n            ))}\n          </select>\n        </label>\n        <label htmlFor=\"method\" className=\"label-form\">\n          Método de pagamento\n          <select id=\"method\" onChange={ this.handleChange }>\n            <option>Dinheiro</option>\n            <option>Cartão de crédito</option>\n            <option>Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\" className=\"label-form\">\n          Tag\n          <select id=\"tag\" onChange={ this.handleChange }>\n            <option>Alimentação</option>\n            <option>Lazer</option>\n            <option>Trabalho</option>\n            <option>Transporte</option>\n            <option>Saúde</option>\n          </select>\n        </label>\n        <ButtonAdd onClick={ this.onSavedAdd } />\n      </form>\n      <form>\n      <TableExpenses />\n      </form>\n      </div>\n    );\n  }\n}\n\nFormWallet.propTypes = {\n  addChange: PropTypes.func.isRequired,\n  currencies: PropTypes.shape({}).isRequired,\n  expenses: PropTypes.shape({\n    length: PropTypes.number,\n  }).isRequired,\n  fetchAPI: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAPI: (wallet) => dispatch(valueCambio(wallet)),\n  addChange: (stateTotal) => dispatch(convertValue(stateTotal)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormWallet);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport FormWallet from '../components/FormWallet';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n\n    this.sumTotal = this.sumTotal.bind(this);\n  }\n\n  sumTotal() {\n    let sum = 0;\n    const { convertValue } = this.props;\n    convertValue.forEach((item) => {\n      const { value, currency, exchangeRates } = item;\n      if (exchangeRates[currency]) {\n        sum += Number(value) * Number(exchangeRates[currency].ask);\n        return sum;\n      } return sum;\n    });\n    return sum.toFixed(2);\n  }\n\n  render() {\n    const { emailValue } = this.props;\n    return (\n      <div>\n        <header className=\"header-wallet\">\n          <span data-testid=\"email-field\" className=\"email-value\">{ emailValue }</span>\n          <span data-testid=\"total-field\" className=\"sum-total\">{ this.sumTotal() }</span>\n          <span data-testid=\"header-currency-field\" className=\"sum-total\">BRL</span>\n        </header>\n        <FormWallet />\n      </div>\n    );\n  }\n}\n\nWallet.propTypes = {\n  convertValue: PropTypes.shape({\n    forEach: PropTypes.func,\n  }).isRequired,\n  emailValue: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  emailValue: state.user.email,\n  convertValue: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps, null)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './css/main.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SAVE_EMAIL } from '../actions/index';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_EMAIL:\n    return { ...state, email: action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import { CAMBIO_CHANGE, CONVERT_VALUE } from '../actions/index';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case CAMBIO_CHANGE:\n    return { ...state, currencies: action.payload };\n  case CONVERT_VALUE:\n    return { ...state, expenses: [...state.expenses, action.payload] };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}